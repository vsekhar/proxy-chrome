#!/bin/bash

# Prereqs:
#  - Chrome (http://www.google.com/chrome)
#  - gcloud (https://cloud.google.com/sdk/)
#  - Create project and configure billing (https://console.cloud.google.com)
#  - gcloud init to that project

set -e
set -o pipefail

# logging from http://stackoverflow.com/a/7287873/608382
log() { printf '%s: %s\n' "$(date)" "$*"; }
error() { log "ERROR - $*" >&2; }
fatal() { log "FATAL - $*" >&2; exit 1; }

# multiple traps from https://www.reddit.com/r/programming/comments/15mnxe/how_exit_traps_can_make_your_bash_scripts_way/c7o6yqf
_ON_EXIT=( )
_exit () {
    [[ ${#_ON_EXIT[@]} -gt 0 ]] || return
    for i in $(seq ${#_ON_EXIT[@]} -1 1); do # in reverse order
        ( ${_ON_EXIT[$(( i - 1 ))]} ) || true
    done
}
trap "_exit" EXIT
_on_exit () {
    _ON_EXIT+=( "$1" )
}

# find Chrome in default installation points
UNAME=$(uname)
if [[ "$UNAME" == 'Darwin' ]]; then
	log "Mac OS detected"
	CHROME=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome
elif [[ "$UNAME" == 'Linux' ]]; then
	if [[ -f "/usr/bin/lsb_release" ]]; then
		# something debian
		DISTRO=$(/usr/bin/lsb_release -i | cut -f 2 -d ':' | tr -d '{ \t}')
		if [[ "$DISTRO" == 'Ubuntu' ]] || [[ "$DISTRO" == 'Debian' ]]; then
			log "Ubuntu detected"
			CHROME=$(which google-chrome)
		fi
	# TODO: other distros
	fi
else
	fatal "Operating system '$UNAME' not supported"
fi
if [[ ! -f "$CHROME" ]]; then
	fatal "Chrome not found at '$CHROME'"
fi
log "Using Chrome at '$CHROME'"

# configure stash space
BASE_TEMP_DIR=/tmp
TEMP_DIR=$(mktemp -d $BASE_TEMP_DIR/proxy-tdir.XXXXXXX)
function clean_up {
	log "Local state of $(du -hs $TEMP_DIR | cut -f 1)"
	log "Cleaning up"
	srm -srf "$TEMP_DIR" || log "srm not found, using non-secure delete"; rm -rf "$TEMP_DIR" || error "failed to clean up '$TEMP_DIR'"
}
_on_exit clean_up

# start instance
NAME=proxy-chrome-server-$RANDOM
log "Starting instance"
gcloud compute instances create "$NAME" \
	--boot-disk-auto-delete \
	--image "ubuntu-15-10" \
	--no-scopes \
	--machine-type "f1-micro" \
	--maintenance-policy "MIGRATE"

function stop_instance {
	log "Deleting instance"
	gcloud compute instances delete $NAME --delete-disks=all --quiet
}
_on_exit stop_instance

# wait for instance to start
log "Waiting for instance"
while true; do
	STATUS=$(gcloud compute instances describe $NAME --format=text | grep "^status:" | tr -s ' ' | cut -f 2 -d ' ')
	if [[ "$STATUS" == "RUNNING" ]]; then
		log "Instance running"
		break
	fi
	sleep 5
done

# get ssh config and addresses
SSH_CONFIG_FILE=$(mktemp $TEMP_DIR/ssh_config.XXXXXX)
gcloud compute config-ssh --ssh-config-file="$SSH_CONFIG_FILE" > /dev/null
SSH_HOST=$(cat $SSH_CONFIG_FILE | grep "^Host $NAME" | cut -f 2 -d ' ')
HOST=$(cat $SSH_CONFIG_FILE | grep "HostName" | tr -s ' ' | cut -f 3 -d ' ')

# wait for network to come up
log "Waiting for network"
while ! ping -nc 1 $HOST &>/dev/null; do sleep 1; done
log "Network up"
sleep 2 # a bit more time to ensure sshd is up

# start tunnel
log "Establishing tunnel to instance at $IP"
LOGIN_USER=$USER
TUNNEL_PORT=9919
ssh -M -S $TEMP_DIR/proxy-ssh-ctrl-socket -CfnNT -F "$SSH_CONFIG_FILE" -D $TUNNEL_PORT $LOGIN_USER@$SSH_HOST
function stop_tunnel {
	log "Stopping tunnel"
	ssh -S $TEMP_DIR/proxy-ssh-ctrl-socket -F "$SSH_CONFIG_FILE" -O exit $LOGIN_USER@$SSH_HOST # "Exit request sent"
}
_on_exit stop_tunnel

# start clean incognito chrome session with proxy
log "Starting chrome"
"$CHROME" --incognito --proxy-server="socks5://localhost:$TUNNEL_PORT" --user-data-dir="$TEMP_DIR" --disable-background-mode --no-first-run "https://www.youtube.com/watch?v=IDQA53TQJIc" 2>/dev/null
log "Chrome exited"
