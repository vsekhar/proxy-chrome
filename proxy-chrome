#!/bin/bash

# Prereqs:
#  - Chrome (http://www.google.com/chrome)
#  - gcloud (https://cloud.google.com/sdk/)
#  - Create project and configure billing (https://console.cloud.google.com)
#  - gcloud init to that project

set -e
set -o pipefail

NAME=proxy-chrome-server-$RANDOM
TYPE="n1-standard-1"
# TYPE="n1-standard-1"
ZONE="us-central1-a"
# ZONE="us-east4-b"
# ZONE="us-west1-b"
# ZONE="asia-east1-a"
IMAGEFAMILY="coreos-stable"
IMAGEPROJECT="coreos-cloud"

# logging from http://stackoverflow.com/a/7287873/608382
log() { printf '%s: %s\n' "$(date +"%T")" "$*"; }
error() { log "ERROR - $*" >&2; }
fatal() { log "FATAL - $*" >&2; exit 1; }

# multiple traps from https://www.reddit.com/r/programming/comments/15mnxe/how_exit_traps_can_make_your_bash_scripts_way/c7o6yqf
_ON_EXIT=( )
_exit () {
    [[ ${#_ON_EXIT[@]} -gt 0 ]] || return
    for i in $(seq ${#_ON_EXIT[@]} -1 1); do # in reverse order
        ( ${_ON_EXIT[$(( i - 1 ))]} ) || true
    done
}
trap "_exit" EXIT
_on_exit () {
    _ON_EXIT+=( "$1" )
}

# find Chrome in default installation points
UNAME=$(uname)
if [[ "$UNAME" == 'Darwin' ]]; then
	log "Mac OS detected"
	CHROME=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome
else
	CHROME=$(which google-chrome) || fatal "Operating System '$UNAME' not supported"
fi
if [[ ! -f "$CHROME" ]]; then
	fatal "Chrome not found at '$CHROME'"
fi
log "Using Chrome at '$CHROME'"

# start instance
log "Using zone $ZONE"
log "Starting instance"
INSTANCE_START_TIME=$(date +%s)
gcloud compute instances create "$NAME" \
	--boot-disk-auto-delete \
	--image-family "$IMAGEFAMILY" \
	--image-project "$IMAGEPROJECT" \
	--no-scopes \
	--machine-type "$TYPE" \
	--zone "$ZONE" \
	--maintenance-policy "MIGRATE"

function stop_instance {
	log "Deleting instance"
	gcloud compute instances delete $NAME --zone "$ZONE" --delete-disks=all --quiet
}
_on_exit stop_instance

# wait for instance to start
log "Waiting for instance"
while true; do
	STATUS=$(gcloud compute instances describe $NAME --zone "$ZONE" --format=text | grep "^status:" | tr -s ' ' | cut -f 2 -d ' ')
	if [[ "$STATUS" == "RUNNING" ]]; then
		log "Instance running"
		break
	fi
	sleep 5
done

# configure stash space
BASE_TEMP_DIR=/tmp
TEMP_DIR=$(mktemp -d "$BASE_TEMP_DIR/proxy-tdir.XXXXXXX")
function clean_up {
	log "Local state of $(du -hs $TEMP_DIR | cut -f 1)"
	log "Cleaning up"
	if which srm > /dev/null ; then
		if [[ "$UNAME" == 'Darwin' ]]; then
			SRMFLAGS='-srf'
		else
			SRMFLAGS='-sllrf'
		fi
		srm $SRMFLAGS "$TEMP_DIR" || error "failed to clean up '$TEMP_DIR'"
	else
		log "srm not found, using non-secure delete"
		rm -rf "$TEMP_DIR" || error "failed to clean up '$TEMP_DIR'"
	fi
}
_on_exit clean_up

HOST=$(gcloud compute instances list "$NAME" --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
log "Host: $HOST"

# wait for network to come up
log "Waiting for network"
while ! ping -nc 1 $HOST &>/dev/null; do sleep 1; done
log "Network up"
sleep 10

# start tunnel (SSH keys take time to propagate, so try a few times)
log "Establishing tunnel"
TUNNEL_PORT=9919
TRIES=3
WAITTIME=5
n=0
until [ $n -ge $TRIES ]
do
  gcloud compute ssh "$NAME" \
    --zone="$ZONE" \
    --ssh-flag="-q" \
    --ssh-flag="-M" \
    --ssh-flag="-S $TEMP_DIR/proxy-ssh-ctrl-socket" \
    --ssh-flag="-o BatchMode=yes" \
    --ssh-flag="-o ConnectTimeout=10" \
    --ssh-flag="-o StrictHostKeyChecking=no" \
    --ssh-flag="-o UserKnownHostsFile=/dev/null" \
    --ssh-flag="-D $TUNNEL_PORT" \
    --ssh-flag="-CfnNT" && break
  log "Retrying"
  n=$[$n+1]
  sleep $WAITTIME
done

INSTANCE_END_TIME=$(date +%s)
log "Instance of $TYPE running $IMAGE took $(($INSTANCE_END_TIME - $INSTANCE_START_TIME))s from create to ssh"
function stop_tunnel {
	log "Stopping tunnel"
	gcloud compute ssh "$NAME" \
  --zone="$ZONE" \
  --ssh-flag="-q" \
  --ssh-flag="-S $TEMP_DIR/proxy-ssh-ctrl-socket" \
  --ssh-flag="-O exit"
}
_on_exit stop_tunnel

# start clean incognito chrome session with proxy
log "Starting chrome"
"$CHROME" \
	--incognito \
	--proxy-server="socks5://localhost:$TUNNEL_PORT" \
	--user-data-dir="$TEMP_DIR" \
	--disable-background-mode \
	--no-first-run \
	--no-default-browser-check \
	"https://www.youtube.com/watch?v=RDfjXj5EGqI" \
	2>/dev/null
log "Chrome exited"
